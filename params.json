{"name":"Javascript Guidelines","tagline":"Javascript basics & Guidelines","body":"# Javascript Basics & Guidelines\r\n\r\n## Table of contents\r\n\r\n1. [Comments] (#comments)\r\n1. [Types (Primitives)] (#datatypes)\r\n1. [Arrays] (#arrays)\r\n1. [Objects] (#objects)\r\n1. [Strings] (#strings)\r\n1. [Functions] (#functions)\r\n1. [Variables] (#variables)\r\n1. [Conditional Statements] (#conditional stmt)\r\n1. [Loops] (#loops)\r\n1. [Callbacks] (#callbacks)\r\n1. [Prototypes] (#prototypes)\r\n1. [Naming Convention] (#naming conventions)\r\n\r\n\r\n## comments\r\n\r\n  - **comments**: In javascript there are 2 types of comments\r\n\r\n    + `Single line comment`\r\n    + `Multi line comment`\r\n\r\n    ```javascript\r\n    //this is a single line comment\r\n\r\n    /*\r\n      this is a multi line comment\r\n    */\r\n    ```\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n## datatypes\r\n\r\n  - **Primitive data types**: \r\n\r\n    +  `number`\r\n    +  `string`\r\n    +  `boolean (true or false)`\r\n    +  `undefined`\r\n    +  `null`\r\n\r\n    ```javascript\r\n      var foo = 1; //number\r\n      var bar = 'Hello World'; //string\r\n    ```\r\n\r\n  - Above primitive data type values are accessed directly without any reference. \r\n\r\n  - **Other datatypes**: such as object, array are accessed by its reference\r\n\r\n    + `object`\r\n    + `array`\r\n\r\n    ```javascript\r\n      var foo = [1, 'hello']; //array\r\n      \r\n      foo[0] = 1; //accessing array value by its reference\r\n      \r\n      var bar = {\r\n        name: 'Hello World' \r\n      }; //object\r\n\r\n      bar.name = 'Hello World'; //accessing object by its reference\r\n    ```\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n## arrays\r\n\r\n - Array creation using literal syntax\r\n\r\n    ```javascript\r\n    //Bad\r\n    var foo = New Array();\r\n\r\n    //Good\r\n    var foo = []; //array literal\r\n    ```\r\n  \r\n  - Array starts at index 0\r\n\r\n    ```javascript\r\n    var bar = [1]; // array starts at index 0\r\n    \r\n    console.log(bar[0]); //print 1\r\n    ```\r\n\r\n  - Add a new item to an array\r\n\r\n    ```javascript\r\n    var bar = [1];\r\n    bar.push(2); //adds 2 at the end of an array\r\n\r\n    console.log(bar); //print [1, 2]\r\n    ```\r\n\r\n    - Add a new item at start of an array\r\n    \r\n    ```javascript\r\n    var bar = [1];\r\n    bar.unshift(2); //adds 2 before 1\r\n\r\n    console.log(bar); //print [2, 1]\r\n    ```\r\n  \r\n    - Remove an item at the end of an array\r\n\r\n    ```javascript\r\n    var bar = [2, 1, 2];\r\n    bar.shift(2); //removes 2 from the start\r\n\r\n    console.log(bar); //print [1, 2]\r\n    ```\r\n\r\n    - Remove an item at start of an array\r\n\r\n    ```javascript\r\n    var bar = [2, 1, 2];\r\n    bar.pop(2); //removes 2 from the end\r\n\r\n    console.log(bar); //print [2, 1]\r\n    ```\r\n\r\n  - Get the length of an array\r\n\r\n  ```javascript\r\n    var bar = [1, 2, 'hello'];\r\n\r\n    console.log(bar.length); //print 3\r\n  ```\r\n  \r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n## objects\r\n\r\n - Object creation using literal syntax\r\n\r\n  ```javascript\r\n    //bad\r\n    var obj = new Object();\r\n    \r\n    //good\r\n    var obj = {}; //empty object literal\r\n  ```\r\n\r\n  - Accessing an object\r\n\r\n  ```javascript\r\n    var obj = {\r\n      name: 'ABC',\r\n      type: 'Alphabet',\r\n      id: 123\r\n    };\r\n\r\n    console.log(obj.name); //print ABC\r\n\r\n    console.log(obj['name']); //print ABC\r\n  ```\r\n\r\n  - Use better naming convension and don't use [reserved keywords](http://www.w3schools.com/js/js_reserved.asp) such as private, class etc.\r\n\r\n  ```javascript\r\n    //bad\r\n    var obj = {\r\n      class: 'car'\r\n    };\r\n\r\n    //good\r\n    var obj = {\r\n      type: 'car'\r\n    };\r\n  ```\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n## strings\r\n\r\n  - Using single quote `''` for strings\r\n\r\n  ```javascript\r\n    //bad\r\n    var bar = \"Hello world\";\r\n\r\n    //good\r\n    var bar = 'Hello world';\r\n  ```  \r\n\r\n  - Using `+` to concatenate strings\r\n\r\n  ```javascript\r\n    var bar = 'Hi I am ' + 'gokul';\r\n  ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n\r\n## functions\r\n\r\n  - Function declarations\r\n\r\n  ```javascript\r\n    function funz(name) {\r\n      alert('My name is ' + name); //will alert my name is gokul\r\n    }\r\n\r\n    funz('gokul'); //call's the above function with argument\r\n\r\n    var newFunz = new funz(); //creates an instance of the function funz\r\n  ```\r\n\r\n  - Function expressions\r\n\r\n  ```javascript\r\n    //anonymous function\r\n    var funz = function() {\r\n      alert('I am a function too');\r\n    };\r\n\r\n    funz();\r\n    \r\n    //Named function expression\r\n    var namedFunz = function funz() {\r\n      alert('I am a function too');\r\n    };\r\n\r\n    namedFunz();\r\n  ```\r\n\r\n  - Immediately invoked function express (IIFE)\r\n\r\n    - below function is called automatically\r\n\r\n    ```javascript\r\n    (function () {\r\n      alert('I am a function which is invoked automatically');\r\n    });\r\n    ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n## variables\r\n\r\n  - Variable creation\r\n\r\n  ```javascript\r\n  //bad\r\n  foo = 1; \r\n  \r\n  //good\r\n  var foo = 1; //assigns number 1 to the variable foo\r\n  ```\r\n\r\n  - local and global variables in functions\r\n  \r\n  ```javascript\r\n  //global\r\n  var foo = 1; \r\n\r\n  alert(foo); //will alert 1\r\n\r\n  function funz() {\r\n    var bar = 10; //local variable\r\n    console.log(bar); //print 10\r\n    foo = 10; //changing the global variable value 1 to 10\r\n  }\r\n\r\n  alert(foo); //will alert 10\r\n\r\n  funz(); //calling the function\r\n  ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n# More contents are coming soon\r\n\r\n\r\n\r\nLicense\r\n----\r\n\r\nMIT\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}