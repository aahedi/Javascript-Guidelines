{"name":"Javascript Guidelines","tagline":"Basics and guidelines to write a better javascript","body":"# Javascript Basics & Guidelines\r\n\r\n## Table of contents\r\n\r\n1. [Comments] (#comments)\r\n1. [Types (Primitives)] (#datatypes)\r\n1. [Arrays] (#arrays)\r\n1. [Objects] (#objects)\r\n1. [Strings] (#strings)\r\n1. [Functions] (#functions)\r\n1. [Variables] (#variables)\r\n1. [Conditional Statements] (#conditional-statements)\r\n1. [Comparison Operators] (#comparison-operators)\r\n1. [Loops] (#loops)\r\n1. [Prototypes] (#prototypes)\r\n\r\n\r\n## comments\r\n\r\n  - **comments**: In javascript there are 2 types of comments\r\n\r\n    + `Single line comment`\r\n\r\n    + `Multi line comment`\r\n    \r\n\r\n    ```javascript\r\n    //this is a single line comment\r\n\r\n    /*\r\n      this is a multi line comment\r\n    */\r\n    ```\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n## datatypes\r\n\r\n  - **Primitive data types**: \r\n\r\n    +  `number`\r\n\r\n    +  `string`\r\n\r\n    +  `boolean (true or false)`\r\n\r\n    +  `undefined`\r\n\r\n    +  `null`\r\n\r\n\r\n    ```javascript\r\n      var foo = 1; //number\r\n      var bar = 'Hello World'; //string\r\n    ```\r\n\r\n  - Above primitive data type values are accessed directly without any reference. \r\n\r\n  - **Other datatypes**: such as object, array are accessed by its reference\r\n\r\n    + `object`\r\n\r\n    + `array`\r\n\r\n\r\n    ```javascript\r\n      var foo = [1, 'hello']; //array\r\n      \r\n      foo[0] = 1; //accessing array value by its reference\r\n      \r\n      var bar = {\r\n        name: 'Hello World' \r\n      }; //object\r\n\r\n      bar.name = 'Hello World'; //accessing object by its reference\r\n    ```\r\n\r\n  - An example for String\r\n\r\n\r\n    ```javascript\r\n      function stringFunz(str) {\r\n        str = 'bar';\r\n      }\r\n\r\n      var string = 'foo';\r\n      console.log(string); // \"foo\"\r\n\r\n      stringFunz(string);\r\n      console.log(string); // \"foo\"\r\n\r\n      //Above string still remains as `foo`\r\n    ```\r\n\r\n  - Now let's try it with a reference in object\r\n\r\n    ```javascript\r\n    function objectFunz(obj) {\r\n      obj.name = 'bar';\r\n    }\r\n\r\n    var obj = {}; //New object\r\n\r\n    obj.name = 'foo';\r\n    console.log(obj.name); // \"foo\"\r\n    \r\n    objectFunz(object);\r\n    console.log(obj.name); // \"bar\"\r\n\r\n    //See now the obj.name is changed to `bar` \r\n    ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n## arrays\r\n\r\n - Array creation using literal syntax\r\n\r\n    ```javascript\r\n    //Bad\r\n    var foo = New Array();\r\n\r\n    //Good\r\n    var foo = []; //array literal\r\n    ```\r\n  \r\n  - Array starts at index 0\r\n\r\n    ```javascript\r\n    var bar = [1]; // array starts at index 0\r\n    \r\n    console.log(bar[0]); //print 1\r\n    ```\r\n\r\n  - Add a new item to an array\r\n\r\n    ```javascript\r\n    var bar = [1];\r\n    bar.push(2); //adds 2 at the end of an array\r\n\r\n    console.log(bar); //print [1, 2]\r\n    ```\r\n\r\n    - Add a new item at start of an array\r\n    <br>\r\n\r\n    ```javascript\r\n    var bar = [1];\r\n    bar.unshift(2); //adds 2 before 1\r\n\r\n    console.log(bar); //print [2, 1]\r\n    ```\r\n  \r\n  - Remove an item at start of an array  \r\n    \r\n\r\n    ```javascript\r\n    var bar = [4, 1, 2];\r\n    bar.shift(); //removes 4 from the start\r\n\r\n    console.log(bar); //print [1, 2]\r\n    ```\r\n\r\n  - Remove an item at the end of an array\r\n\r\n\r\n    ```javascript\r\n    var bar = [2, 1, 5];\r\n    bar.pop(); //removes 5 from the end\r\n\r\n    console.log(bar); //print [2, 1]\r\n    ```\r\n\r\n  - Get the length of an array\r\n\r\n  ```javascript\r\n    var bar = [1, 2, 'hello'];\r\n\r\n    console.log(bar.length); //print 3\r\n  ```\r\n  \r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n## objects\r\n\r\n - Object creation using literal syntax\r\n\r\n  ```javascript\r\n    //bad\r\n    var obj = new Object();\r\n    \r\n    //good\r\n    var obj = {}; //empty object literal\r\n  ```\r\n\r\n  - Accessing an object\r\n\r\n  ```javascript\r\n    var obj = {\r\n      name: 'ABC',\r\n      type: 'Alphabet',\r\n      id: 123\r\n    };\r\n\r\n    console.log(obj.name); //print ABC\r\n\r\n    console.log(obj['name']); //print ABC\r\n  ```\r\n\r\n  - Use better naming convension and don't use [reserved keywords](http://www.w3schools.com/js/js_reserved.asp) such as private, class etc.\r\n\r\n  ```javascript\r\n    //bad\r\n    var obj = {\r\n      class: 'car'\r\n    };\r\n\r\n    //good\r\n    var obj = {\r\n      type: 'car'\r\n    };\r\n  ```\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n## strings\r\n\r\n  - Using single quote `''` for strings\r\n\r\n  ```javascript\r\n    //bad\r\n    var bar = \"Hello world\";\r\n\r\n    //good\r\n    var bar = 'Hello world';\r\n  ```  \r\n\r\n  - Using `+` to concatenate strings\r\n\r\n  ```javascript\r\n    var bar = 'Hi I am ' + 'gokul';\r\n  ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n\r\n## functions\r\n\r\n  - Function declarations\r\n\r\n  ```javascript\r\n    function funz(name) {\r\n      alert('My name is ' + name); //will alert my name is gokul\r\n    }\r\n\r\n    funz('gokul'); //call's the above function with argument\r\n\r\n    var newFunz = new funz(); //creates an instance of the function funz\r\n  ```\r\n\r\n  - Function expressions\r\n\r\n  ```javascript\r\n    //anonymous function\r\n    var funz = function() {\r\n      alert('I am a function too');\r\n    };\r\n\r\n    funz();\r\n    \r\n    //Named function expression\r\n    var namedFunz = function funz() {\r\n      alert('I am a function too');\r\n    };\r\n\r\n    namedFunz();\r\n  ```\r\n\r\n  - Immediately invoked function express (IIFE)\r\n\r\n    - below function is called automatically\r\n    <br>\r\n\r\n    ```javascript\r\n    (function () {\r\n      alert('I am a function which is invoked automatically');\r\n    })();\r\n    ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n## variables\r\n\r\n  - Variable creation\r\n\r\n  ```javascript\r\n  //bad\r\n  foo = 1; //Stores 1 as global variable\r\n  \r\n  //good\r\n  var foo = 1; //assigns number 1 to the variable foo\r\n  ```\r\n\r\n  - Local and Global variables\r\n  \r\n  ```javascript\r\n  //global\r\n  var foo = 1; \r\n\r\n  alert(foo); //will alert 1\r\n\r\n  function funz() {\r\n    var bar = 10; //local variable\r\n    console.log(bar); //print 10\r\n    foo = 10; //changing the global variable value 1 to 10\r\n  }\r\n\r\n  funz(); //calling the function\r\n\r\n  alert(foo); //will alert 10\r\n\r\n  ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n## conditional statements\r\n\r\n- If, Else if, Else Statement\r\n  \r\n  ```javascript\r\n  var a = false;\r\n  var b = true;\r\n\r\n  //If the below condition is true, call alert()\r\n  if (a) {\r\n    alert('I am a if statement');\r\n  }\r\n  else if (b) {\r\n    alert('I am else if statement'); //Will alert because b == true\r\n  }\r\n  else {\r\n    alert('I am else statement');\r\n  }\r\n  ```  \r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n## comparison operators\r\n\r\n- Always use `===` instead of `==` and `!==` instead of `!=`\r\n\r\n- Difference is that `===` and `!==` will also check the type of the variable, See below example\r\n\r\n\r\n  ```javascript\r\n  var foo = 1;\r\n  var bar = '1';\r\n  \r\n  console.log(foo == 1); //True, because `==` will do automatic type conversion\r\n\r\n  console.log(bar === 1); //False, because 1 !== '1'\r\n\r\n  console.log(bar === '1'); //True\r\n\r\n  console.log(bar !== 1); //True , '1' is not equal value as well as type\r\n\r\n  ```\r\n\r\n## loops\r\n\r\n - for, for/in, while, do/while loop\r\n\r\n  -- for loop\r\n\r\n  ```javascript\r\n  for (statement 1; statement 2; statement 3) {\r\n    \r\n  }\r\n\r\n  //statement 1 - Executes before the loop\r\n  //statement 2 - Condition to run the loop\r\n  //statement 3 - Executes each time after the loop\r\n\r\n  //See below for example\r\n\r\n  for (var i = 0; i < 10; i++) {\r\n    console.log(i); //Will print from 0 to 9\r\n  }\r\n  \r\n  ```\r\n\r\n  -- for/in loop to loop through an array or object\r\n\r\n  ```javascript\r\n\r\n  for (var x in array or object)  {\r\n  \r\n  }\r\n\r\n  //Looping through an array\r\n  var foo = [1, 2, 3, 4, 5];\r\n\r\n  for (var i in foo) {\r\n    console.log(foo[i]); //Will loop the array and prints 1 to 5\r\n  }\r\n  \r\n  //Looping through an object\r\n  var obj = { fname : 'gokul', lname : 'krishh'};\r\n\r\n  for (var name in obj) { \r\n\r\n    //To check property belongs to object, not to prototype object\r\n    //hasOwnProperty is only to check objects\r\n    \r\n    if (obj.hasOwnProperty(name)) {\r\n      console.log(obj[name]); //Will print \"gokul\" and \"krishh\"\r\n    }\r\n\r\n  }\r\n\r\n  ```  \r\n\r\n  -- while loop\r\n\r\n\r\n  ```javascript\r\n  while (statement 1) {\r\n    \r\n  }\r\n\r\n  //statement 1 - Condition to run the loop\r\n  //See below for example\r\n\r\n  var i = 0;\r\n\r\n  while (i < 10) {\r\n    i++; //Increment i\r\n    console.log(i); //Will print from 1 to 10\r\n  }\r\n  \r\n  ```\r\n\r\n  -- do/while loop will execute once, before checking the condition in while\r\n\r\n\r\n  ```javascript\r\n  do {\r\n    //Execute once before checking while condition\r\n  } while(statement 1)\r\n\r\n  //statement 1 - Condition to run the loop\r\n  //See below for example\r\n\r\n  var i = 0;\r\n\r\n  do {\r\n    console.log(i); //Will print from 0 to 10\r\n    i++; //Increment i\r\n  } while (i < 10) \r\n  \r\n  ```\r\n\r\n**[⬆ back to top](#table-of-contents)**\r\n\r\n## prototypes\r\n\r\n  - In javascript function, array, objects are considered as objects\r\n\r\n  - All objects in js inherit, properties and methods from the prototype\r\n\r\n  ```javascript\r\n  function person(name, age) {\r\n    this.name = name;\r\n    this.age  = age;\r\n  }\r\n  \r\n  person.prototype.model = 'Car';\r\n\r\n  //model `car` is added to the person() from its prototype\r\n\r\n  var newPerson = new person('Gokul', 23); //calling the person()\r\n\r\n  console.log(newPerson); //Will print {name: \"Gokul\", age: 23, model: \"Car\"}\r\n\r\n  ```\r\n\r\n#### More contents are coming soon...\r\n\r\n# Contribution\r\n\r\n If the contents above need to be improved or if you want to add more content to it. Feel free to fork and give me pull request.\r\n\r\n Thanks!!\r\n\r\n\r\n## Author\r\n\r\n[![Gokulakrishnan](https://avatars0.githubusercontent.com/u/2944237?v=3&s=72)](https://github.com/gokulkrishh)\r\n\r\n\r\nLicense\r\n----\r\n\r\nMIT\r\n\r\n","google":"UA-62413299-1","note":"Don't delete this file! It's used internally to help with page regeneration."}